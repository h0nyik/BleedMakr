name: Auto Build (Prerelease)

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build Windows EXE
      run: |
        cd scripts
        python build_exe.py
    - name: Rename Windows executable
      run: |
        cd scripts/dist
        ren BleedMakr.exe BleedMakr-windows.exe
    - name: Sign Windows executable
      run: |
        cd scripts
        $cert = Get-ChildItem -Path "Cert:\CurrentUser\My" | Where-Object {$_.Subject -like "*BleedMakr*"} | Select-Object -First 1
        if (-not $cert) {
          Write-Host "Vytv√°≈ô√≠m nov√Ω certifik√°t pro podpis..."
          $cert = New-SelfSignedCertificate -Subject "CN=BleedMakr, O=BleedMakr Team, C=CZ" -Type CodeSigningCert -CertStoreLocation "Cert:\CurrentUser\My" -NotAfter (Get-Date).AddYears(3)
          Write-Host "Certifik√°t vytvo≈ôen: $($cert.Thumbprint)"
        } else {
          Write-Host "Pou≈æ√≠v√°m existuj√≠c√≠ certifik√°t: $($cert.Thumbprint)"
        }
        $result = Set-AuthenticodeSignature -FilePath "dist\BleedMakr-windows.exe" -Certificate $cert
        if ($result.Status -eq "UnknownError" -or $result.Status -eq "Valid") {
          Write-Host "‚úÖ Aplikace podeps√°na √∫spƒõ≈°nƒõ"
        } else {
          Write-Host "‚ö†Ô∏è Podpis s varov√°n√≠m: $($result.StatusMessage)"
        }
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-Windows-x64
        path: scripts/dist/
        retention-days: 30

  build-macos:
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build macOS App
      run: |
        cd scripts
        python build_exe.py
    - name: Rename macOS executable
      run: |
        cd scripts/dist
        mv BleedMakr BleedMakr-macos
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-macOS-x64
        path: scripts/dist/
        retention-days: 30

  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build Linux Binary
      run: |
        cd scripts
        python build_exe.py
    - name: Rename Linux executable
      run: |
        cd scripts/dist
        mv BleedMakr BleedMakr-linux
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-Linux-x64
        path: scripts/dist/
        retention-days: 30

  create-prerelease:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    - name: Get commit SHA
      id: commit
      run: echo "SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
    - name: Get current date
      id: date
      run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
    - name: Get version from version.txt
      id: version
      run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT
    - name: Generate changelog
      id: changelog
      run: |
        # Z√≠sk√°n√≠ commit≈Ø od posledn√≠ho tagu
        if git describe --tags --abbrev=0 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          COMMITS=$(git log --oneline --no-merges ${LAST_TAG}..HEAD)
        else
          COMMITS=$(git log --oneline --no-merges)
        fi
        
        # Kategorizace commit≈Ø
        FEATURES=""
        FIXES=""
        DOCS=""
        OTHER=""
        
        while IFS= read -r commit; do
          if [[ $commit =~ ^[a-f0-9]{7}\ feat: ]]; then
            FEATURES+="- ${commit#*feat: }"$'\n'
          elif [[ $commit =~ ^[a-f0-9]{7}\ fix: ]]; then
            FIXES+="- ${commit#*fix: }"$'\n'
          elif [[ $commit =~ ^[a-f0-9]{7}\ docs: ]]; then
            DOCS+="- ${commit#*docs: }"$'\n'
          else
            OTHER+="- ${commit}"$'\n'
          fi
        done <<< "$COMMITS"
        
        # Vytvo≈ôen√≠ changelogu
        CHANGELOG="## Changelog\n\n"
        if [ ! -z "$FEATURES" ]; then
          CHANGELOG+="### üöÄ Nov√© funkce\n$FEATURES\n"
        fi
        if [ ! -z "$FIXES" ]; then
          CHANGELOG+="### üêõ Opravy\n$FIXES\n"
        fi
        if [ ! -z "$DOCS" ]; then
          CHANGELOG+="### üìö Dokumentace\n$DOCS\n"
        fi
        if [ ! -z "$OTHER" ]; then
          CHANGELOG+="### üîß Ostatn√≠ zmƒõny\n$OTHER\n"
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: List downloaded files
      run: |
        echo "=== Windows files ==="
        ls -la ./BleedMakr-Windows-x64/ || echo "Windows files not found"
        echo "=== macOS files ==="
        ls -la ./BleedMakr-macOS-x64/ || echo "macOS files not found"
        echo "=== Linux files ==="
        ls -la ./BleedMakr-Linux-x64/ || echo "Linux files not found"
    - name: Create Prerelease
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}-prerelease-${{ steps.commit.outputs.SHA }}
        name: "[PRE] v${{ steps.version.outputs.VERSION }} [${{ steps.commit.outputs.SHA }}]"
        body: |
          ## BleedMakr v${{ steps.version.outputs.VERSION }} - Prerelease
          
          **Date:** ${{ steps.date.outputs.DATE }}
          **Commit:** ${{ github.sha }}
          **Version:** ${{ steps.version.outputs.VERSION }}
          
          ### ‚ö†Ô∏è Note
          This is a **prerelease** build from automatic CI/CD pipeline.
          For official release use manual workflow "Create Official Release".
          
          ### üì¶ What's included
          - Automatic build from master branch
          - All platforms (Windows, macOS, Linux)
          - Python 3.12
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### üîß Features
          - Automatic detection and generation of bleed
          - Preservation of vector center in PDF
          - Intelligent bitmap borders with smooth connection
          - Supported formats: PDF, EPS, TIFF, JPG, PNG
          - Modern GUI with drag&drop, previews and detailed log
          - Intelligent detection of white borders
          - Batch processing of multiple files
          - Export to PDF with high resolution (300 DPI)
        draft: false
        prerelease: true
        files: |
          ./BleedMakr-Windows-x64/BleedMakr-windows.exe
          ./BleedMakr-macOS-x64/BleedMakr-macos
          ./BleedMakr-Linux-x64/BleedMakr-linux
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 