name: Build and Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Windows EXE
      run: |
        cd scripts
        python build_exe.py
    
    - name: Sign Windows executable
      run: |
        cd scripts
        $cert = Get-ChildItem -Path "Cert:\CurrentUser\My" | Where-Object {$_.Subject -like "*BleedMakr*"} | Select-Object -First 1
        if (-not $cert) {
          Write-Host "Vytvářím nový certifikát pro podpis..."
          $cert = New-SelfSignedCertificate -Subject "CN=BleedMakr, O=BleedMakr Team, C=CZ" -Type CodeSigningCert -CertStoreLocation "Cert:\CurrentUser\My" -NotAfter (Get-Date).AddYears(3)
          Write-Host "Certifikát vytvořen: $($cert.Thumbprint)"
        } else {
          Write-Host "Používám existující certifikát: $($cert.Thumbprint)"
        }
        
        $result = Set-AuthenticodeSignature -FilePath "dist\BleedMakr-windows.exe" -Certificate $cert
        if ($result.Status -eq "UnknownError" -or $result.Status -eq "Valid") {
          Write-Host "✅ Aplikace podepsána úspěšně"
        } else {
          Write-Host "⚠️ Podpis s varováním: $($result.StatusMessage)"
        }
    
    - name: Rename Windows executable
      run: |
        cd scripts/dist
        ren BleedMakr.exe BleedMakr-windows.exe
    
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-Windows-x64
        path: scripts/dist/
        retention-days: 30

  build-macos:
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build macOS App
      run: |
        cd scripts
        python build_exe.py
    
    - name: Rename macOS executable
      run: |
        cd scripts/dist
        mv BleedMakr BleedMakr-macos
    
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-macOS-x64
        path: scripts/dist/
        retention-days: 30

  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux Binary
      run: |
        cd scripts
        python build_exe.py
    
    - name: Rename Linux executable
      run: |
        cd scripts/dist
        mv BleedMakr BleedMakr-linux
    
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-Linux-x64
        path: scripts/dist/
        retention-days: 30

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Get commit SHA
      id: commit
      run: echo "SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
    
    - name: Get current date
      id: date
      run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
    
    - name: List downloaded files
      run: |
        echo "=== Windows files ==="
        ls -la ./BleedMakr-Windows-x64/ || echo "Windows files not found"
        echo "=== macOS files ==="
        ls -la ./BleedMakr-macOS-x64/ || echo "macOS files not found"
        echo "=== Linux files ==="
        ls -la ./BleedMakr-Linux-x64/ || echo "Linux files not found"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v0.0.1-build-${{ steps.date.outputs.DATE }}-${{ steps.commit.outputs.SHA }}
        name: BleedMakr Build ${{ steps.date.outputs.DATE }} (${{ steps.commit.outputs.SHA }})
        body: |
          ## BleedMakr Build Release
          
          **Datum:** ${{ steps.date.outputs.DATE }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ### Co je nového
          - Automatický build z master větve
          - Všechny platformy (Windows, macOS, Linux)
          - Python 3.12
          
          ### Poznámky
          - Toto je automatický build, ne oficiální release
          - Pro oficiální release použijte Git tag
          - Verze zůstává 0.0.1 až do vyřešení problémů s buildy
        draft: false
        prerelease: true
        files: |
          ./BleedMakr-Windows-x64/BleedMakr-windows.exe
          ./BleedMakr-macOS-x64/BleedMakr-macos
          ./BleedMakr-Linux-x64/BleedMakr-linux
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 