name: Create Official Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for official release (e.g. 1.0.0)'
        required: true
        default: '1.0.0'
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        default: ''

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build Windows EXE
      run: |
        cd scripts
        python build_exe.py
    - name: Rename Windows executable
      run: |
        cd scripts/dist
        ren BleedMakr.exe BleedMakr-windows.exe
    - name: Sign Windows executable
      run: |
        cd scripts
        $cert = Get-ChildItem -Path "Cert:\CurrentUser\My" | Where-Object {$_.Subject -like "*BleedMakr*"} | Select-Object -First 1
        if (-not $cert) {
          Write-Host "Vytv√°≈ô√≠m nov√Ω certifik√°t pro podpis..."
          $cert = New-SelfSignedCertificate -Subject "CN=BleedMakr, O=BleedMakr Team, C=CZ" -Type CodeSigningCert -CertStoreLocation "Cert:\CurrentUser\My" -NotAfter (Get-Date).AddYears(3)
          Write-Host "Certifik√°t vytvo≈ôen: $($cert.Thumbprint)"
        } else {
          Write-Host "Pou≈æ√≠v√°m existuj√≠c√≠ certifik√°t: $($cert.Thumbprint)"
        }
        $result = Set-AuthenticodeSignature -FilePath "dist\BleedMakr-windows.exe" -Certificate $cert
        if ($result.Status -eq "UnknownError" -or $result.Status -eq "Valid") {
          Write-Host "‚úÖ Aplikace podeps√°na √∫spƒõ≈°nƒõ"
        } else {
          Write-Host "‚ö†Ô∏è Podpis s varov√°n√≠m: $($result.StatusMessage)"
        }
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-Windows-x64
        path: scripts/dist/
        retention-days: 30

  build-macos:
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build macOS App
      run: |
        cd scripts
        python build_exe.py
    - name: Rename macOS executable
      run: |
        cd scripts/dist
        mv BleedMakr BleedMakr-macos
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-macOS-x64
        path: scripts/dist/
        retention-days: 30

  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build Linux Binary
      run: |
        cd scripts
        python build_exe.py
    - name: Rename Linux executable
      run: |
        cd scripts/dist
        mv BleedMakr BleedMakr-linux
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BleedMakr-Linux-x64
        path: scripts/dist/
        retention-days: 30

  create-official-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    - name: Get commit SHA
      id: commit
      run: echo "SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
    - name: Get current date
      id: date
      run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
    - name: Generate changelog
      id: changelog
      run: |
        # Z√≠sk√°n√≠ commit≈Ø od posledn√≠ho tagu
        if git describe --tags --abbrev=0 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          COMMITS=$(git log --oneline --no-merges ${LAST_TAG}..HEAD)
        else
          COMMITS=$(git log --oneline --no-merges)
        fi
        
        # Kategorizace commit≈Ø
        FEATURES=""
        FIXES=""
        DOCS=""
        BREAKING=""
        OTHER=""
        
        while IFS= read -r commit; do
          if [[ $commit =~ ^[a-f0-9]{7}\ feat: ]]; then
            FEATURES+="- ${commit#*feat: }"$'\n'
          elif [[ $commit =~ ^[a-f0-9]{7}\ fix: ]]; then
            FIXES+="- ${commit#*fix: }"$'\n'
          elif [[ $commit =~ ^[a-f0-9]{7}\ docs: ]]; then
            DOCS+="- ${commit#*docs: }"$'\n'
          elif [[ $commit =~ ^[a-f0-9]{7}\ .*BREAKING\ CHANGE ]]; then
            BREAKING+="- ${commit}"$'\n'
          else
            OTHER+="- ${commit}"$'\n'
          fi
        done <<< "$COMMITS"
        
        # Vytvo≈ôen√≠ changelogu
        CHANGELOG="## üìã Changelog\n\n"
        if [ ! -z "$BREAKING" ]; then
          CHANGELOG+="### ‚ö†Ô∏è Breaking Changes\n$BREAKING\n"
        fi
        if [ ! -z "$FEATURES" ]; then
          CHANGELOG+="### üöÄ Nov√© funkce\n$FEATURES\n"
        fi
        if [ ! -z "$FIXES" ]; then
          CHANGELOG+="### üêõ Opravy\n$FIXES\n"
        fi
        if [ ! -z "$DOCS" ]; then
          CHANGELOG+="### üìö Dokumentace\n$DOCS\n"
        fi
        if [ ! -z "$OTHER" ]; then
          CHANGELOG+="### üîß Ostatn√≠ zmƒõny\n$OTHER\n"
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: List downloaded files
      run: |
        echo "=== Windows files ==="
        ls -la ./BleedMakr-Windows-x64/ || echo "Windows files not found"
        echo "=== macOS files ==="
        ls -la ./BleedMakr-macOS-x64/ || echo "macOS files not found"
        echo "=== Linux files ==="
        ls -la ./BleedMakr-Linux-x64/ || echo "Linux files not found"
    - name: Create Official Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: BleedMakr v${{ github.event.inputs.version }}
        body: |
          # üéâ BleedMakr v${{ github.event.inputs.version }}
          
          **Datum vyd√°n√≠:** ${{ steps.date.outputs.DATE }}
          **Commit:** ${{ github.sha }}
          **Verze:** ${{ github.event.inputs.version }}
          
          ## üéØ Ofici√°ln√≠ vyd√°n√≠
          
          Toto je **ofici√°ln√≠ vyd√°n√≠** BleedMakr v${{ github.event.inputs.version }}.
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## üîß Hlavn√≠ funkce
          
          - **Automatick√° detekce a generov√°n√≠ bleed** - inteligentn√≠ algoritmus pro detekci b√≠l√Ωch okraj≈Ø
          - **Zachov√°n√≠ vektorov√©ho st≈ôedu v PDF** - st≈ôed z≈Øst√°v√° vektorov√Ω, pouze okraje jsou bitmap
          - **Inteligentn√≠ bitmapov√© okraje** s plynul√Ωm spojen√≠m k grafice
          - **Podporovan√© form√°ty**: PDF, EPS, TIFF, JPG, PNG
          - **Modern√≠ GUI** s drag&drop, n√°hledy a detailn√≠ log operac√≠
          - **D√°vkov√© zpracov√°n√≠** v√≠ce soubor≈Ø s progress barem
          - **Export do PDF** s vysok√Ωm rozli≈°en√≠m (300 DPI)
          - **Neomezen√© zpracov√°n√≠** - odstranƒõn√≠ limitu velikosti obr√°zk≈Ø pro tiskov√© aplikace
          - **Automatick√° diagnostika** - detailn√≠ informace o zpracov√°n√≠ ka≈æd√©ho souboru
          - **Kontrola spojen√≠** - automatick√° kontrola shody pixel≈Ø na bleed hranic√≠ch
          - **Adaptivn√≠ DPI** - automatick√© sn√≠≈æen√≠ rozli≈°en√≠ pro velmi velk√© PDF
          - **Soulad barev** - automatick√° korekce barev na bleed hranic√≠ch
          
          ## üì¶ Instalace
          
          St√°hnƒõte soubor pro va≈°i platformu a spus≈•te aplikaci.
          
          ### Po≈æadavky
          - **Windows 10/11** (testov√°no)
          - **Minim√°lnƒõ 4GB RAM**
          - **500MB voln√©ho m√≠sta**
          - **Ghostscript** (pro EPS soubory)
          
          ## üöÄ Pou≈æit√≠
          
          1. **Kliknƒõte "Add Files"** a vyberte grafick√© soubory
          2. **Nastavte velikost bleed** (v√Ωchoz√≠: 3 mm)
          3. **Vyberte v√Ωstupn√≠ slo≈æku**
          4. **Kliknƒõte "Generate Bleed"**
          
          ## üéØ Pou≈æit√≠ v reklamn√≠ agentu≈ôe
          
          Aplikace je optimalizov√°na pro:
          - **Tiskov√© materi√°ly**: Let√°ky, bro≈æury, plak√°ty
          - **Digit√°ln√≠ tisk**: Velkoform√°tov√© tisky (a≈æ 2x3m)
          - **Profesion√°ln√≠ v√Ωstup**: PDF pro vysokorozli≈°en√© tisk√°rny
          - **D√°vkov√© zpracov√°n√≠**: Hromadn√© zpracov√°n√≠ soubor≈Ø s progress barem
          - **Automatick√© o≈ôez√°v√°n√≠**: Odstranƒõn√≠ b√≠l√Ωch okraj≈Ø z importovan√Ωch soubor≈Ø
          - **Velkoform√°tov√© tisky**: Podpora velmi velk√Ωch PDF (a≈æ 1 miliarda pixel≈Ø)
          - **Kontrola kvality**: Automatick√° kontrola spojen√≠ bleed s grafikou
          
          ${{ github.event.inputs.release_notes }}
        draft: false
        prerelease: false
        files: |
          ./BleedMakr-Windows-x64/BleedMakr-windows.exe
          ./BleedMakr-macOS-x64/BleedMakr-macos
          ./BleedMakr-Linux-x64/BleedMakr-linux
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 