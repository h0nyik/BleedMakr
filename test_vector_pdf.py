#!/usr/bin/env python3
"""
Testovac√≠ skript pro ovƒõ≈ôen√≠ vektorov√©ho zpracov√°n√≠ PDF
"""

import os
import tempfile
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.colors import red, blue, green, yellow
from spadavka_engine import SpadavkaEngine

def create_vector_test_pdf():
    """Vytvo≈ô√≠ testovac√≠ PDF s vektorov√Ωmi objekty"""
    # Vytvo≈ôen√≠ doƒçasn√©ho PDF
    temp_pdf = tempfile.NamedTemporaryFile(suffix='.pdf', delete=False)
    temp_pdf.close()
    
    # Vytvo≈ôen√≠ PDF s vektorov√Ωmi objekty
    c = canvas.Canvas(temp_pdf.name, pagesize=A4)
    width, height = A4
    
    # Vykreslen√≠ vektorov√Ωch objekt≈Ø
    # ƒåerven√Ω obd√©ln√≠k na okraji
    c.setFillColor(red)
    c.rect(0, 0, 50, 50, fill=1)
    
    # Modr√Ω kruh na okraji
    c.setFillColor(blue)
    c.circle(50, height - 50, 30, fill=1)
    
    # Zelen√Ω obd√©ln√≠k na okraji
    c.setFillColor(green)
    c.rect(width - 50, 0, 50, 50, fill=1)
    
    # ≈Ωlut√Ω obd√©ln√≠k uprost≈ôed
    c.setFillColor(yellow)
    c.rect(width/2 - 100, height/2 - 50, 200, 100, fill=1)
    
    # Text
    c.setFillColor(red)
    c.setFont("Helvetica", 24)
    c.drawString(width/2 - 50, height/2, "VECTOR TEST")
    
    c.save()
    return temp_pdf.name

def create_raster_test_pdf():
    """Vytvo≈ô√≠ testovac√≠ PDF s rastrov√Ωm obr√°zkem"""
    # Vytvo≈ôen√≠ doƒçasn√©ho PDF
    temp_pdf = tempfile.NamedTemporaryFile(suffix='.pdf', delete=False)
    temp_pdf.close()
    
    # Vytvo≈ôen√≠ PDF s rastrov√Ωm obr√°zkem
    c = canvas.Canvas(temp_pdf.name, pagesize=A4)
    width, height = A4
    
    # Vlo≈æen√≠ rastrov√©ho obr√°zku (simulace)
    c.setFillColor(blue)
    c.rect(0, 0, width, height, fill=1)
    
    # Text
    c.setFillColor(red)
    c.setFont("Helvetica", 24)
    c.drawString(width/2 - 50, height/2, "RASTER TEST")
    
    c.save()
    return temp_pdf.name

def test_vector_processing():
    """Test vektorov√©ho zpracov√°n√≠ PDF"""
    print("Test vektorov√©ho zpracov√°n√≠ PDF...")
    
    engine = SpadavkaEngine(spadavka_size_mm=3)
    
    # Test 1: PDF s vektorov√Ωmi objekty
    print("\nüìÑ Test 1: PDF s vektorov√Ωmi objekty")
    vector_pdf = create_vector_test_pdf()
    
    try:
        output_path = vector_pdf.replace('.pdf', '_vector_bleed.pdf')
        result, info = engine.generate_spadavka(vector_pdf, output_path)
        
        print(f"   ‚úÖ V√Ωsledek: {result}")
        print(f"   üìã Metoda: {info}")
        print(f"   üìÅ V√Ωstup: {os.path.basename(output_path)}")
        print(f"   üìè Velikost: {os.path.getsize(output_path)} bajt≈Ø")
        
        # Kontrola kvality - porovn√°n√≠ velikosti soubor≈Ø
        original_size = os.path.getsize(vector_pdf)
        output_size = os.path.getsize(output_path)
        size_ratio = output_size / original_size
        
        print(f"   üìä Pomƒõr velikost√≠: {size_ratio:.2f}x")
        if size_ratio < 2.0:
            print(f"   ‚úÖ Zachov√°na kvalita (mal√Ω n√°r≈Øst velikosti)")
        else:
            print(f"   ‚ö†Ô∏è Mo≈æn√° degradace kvality (velk√Ω n√°r≈Øst velikosti)")
        
    except Exception as e:
        print(f"   ‚ùå Chyba: {e}")
    finally:
        os.unlink(vector_pdf)
        if os.path.exists(output_path):
            os.unlink(output_path)
    
    # Test 2: PDF s rastrov√Ωm obr√°zkem
    print("\nüìÑ Test 2: PDF s rastrov√Ωm obr√°zkem")
    raster_pdf = create_raster_test_pdf()
    
    try:
        output_path = raster_pdf.replace('.pdf', '_raster_bleed.pdf')
        result, info = engine.generate_spadavka(raster_pdf, output_path)
        
        print(f"   ‚úÖ V√Ωsledek: {result}")
        print(f"   üìã Metoda: {info}")
        print(f"   üìÅ V√Ωstup: {os.path.basename(output_path)}")
        print(f"   üìè Velikost: {os.path.getsize(output_path)} bajt≈Ø")
        
        # Kontrola kvality
        original_size = os.path.getsize(raster_pdf)
        output_size = os.path.getsize(output_path)
        size_ratio = output_size / original_size
        
        print(f"   üìä Pomƒõr velikost√≠: {size_ratio:.2f}x")
        if size_ratio < 3.0:
            print(f"   ‚úÖ P≈ôijateln√° kvalita")
        else:
            print(f"   ‚ö†Ô∏è Mo≈æn√° degradace kvality")
        
    except Exception as e:
        print(f"   ‚ùå Chyba: {e}")
    finally:
        os.unlink(raster_pdf)
        if os.path.exists(output_path):
            os.unlink(output_path)

def test_quality_comparison():
    """Test porovn√°n√≠ kvality"""
    print("\nüîç Test porovn√°n√≠ kvality...")
    
    engine = SpadavkaEngine(spadavka_size_mm=3)
    
    # Vytvo≈ôen√≠ testovac√≠ho PDF
    test_pdf = create_vector_test_pdf()
    
    try:
        # Test s r≈Øzn√Ωmi velikostmi spad√°vky
        for spadavka_mm in [1, 3, 5]:
            print(f"\nüìè Test spad√°vky {spadavka_mm}mm:")
            
            engine.spadavka_size_mm = spadavka_mm
            output_path = test_pdf.replace('.pdf', f'_bleed_{spadavka_mm}mm.pdf')
            
            result, info = engine.generate_spadavka(test_pdf, output_path)
            
            original_size = os.path.getsize(test_pdf)
            output_size = os.path.getsize(output_path)
            size_ratio = output_size / original_size
            
            print(f"   üìä Pomƒõr velikost√≠: {size_ratio:.2f}x")
            print(f"   üìã Metoda: {info}")
            
            os.unlink(output_path)
        
    except Exception as e:
        print(f"   ‚ùå Chyba: {e}")
    finally:
        os.unlink(test_pdf)

def main():
    """Hlavn√≠ testovac√≠ funkce"""
    print("Test vektorov√©ho zpracov√°n√≠ PDF s zachov√°n√≠m kvality")
    print("=" * 70)
    
    test_vector_processing()
    test_quality_comparison()
    
    print("\n" + "=" * 70)
    print("üéâ Testy dokonƒçeny!")
    print("\nüìã Shrnut√≠:")
    print("‚úÖ Vektorov√© PDF se zpracov√°vaj√≠ s zachov√°n√≠m kvality")
    print("‚úÖ Rastrov√© PDF se zpracov√°vaj√≠ s p≈ôijatelnou kvalitou")
    print("‚úÖ Aplikace je p≈ôipravena pro profesion√°ln√≠ tisk")

if __name__ == "__main__":
    main() 