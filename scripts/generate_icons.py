#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Icon generation script for BleedMakr
Generates icons from vector source for all platforms
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
from PIL import Image, ImageDraw

def check_dependencies():
    """Kontroluje dostupnost n√°stroj≈Ø pro konverzi"""
    print("üîç Kontrola n√°stroj≈Ø pro konverzi...")
    
    tools = {
        'PIL/Pillow': 'PIL',
        'ImageMagick': 'magick',
        'Inkscape': 'inkscape'
    }
    
    available_tools = []
    
    for tool_name, import_name in tools.items():
        try:
            if import_name == 'PIL':
                import PIL
                print(f"   ‚úÖ {tool_name}")
                available_tools.append(tool_name)
            else:
                # Kontrola p≈ô√≠kazu v PATH
                result = subprocess.run([import_name, '--version'], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"   ‚úÖ {tool_name}")
                    available_tools.append(tool_name)
                else:
                    print(f"   ‚ùå {tool_name} - nen√≠ dostupn√©")
        except Exception as e:
            print(f"   ‚ùå {tool_name} - chyba: {e}")
    
    return available_tools

def create_simple_icon():
    """Vytvo≈ô√≠ jednoduchou ikonu pro testov√°n√≠"""
    print("\nüé® Vytv√°≈ôen√≠ jednoduch√© testovac√≠ ikony...")
    
    # Vytvo≈ôen√≠ slo≈æek
    Path("assets/icons/windows").mkdir(parents=True, exist_ok=True)
    Path("assets/icons/macos").mkdir(parents=True, exist_ok=True)
    Path("assets/icons/linux").mkdir(parents=True, exist_ok=True)
    
    # Vytvo≈ôen√≠ jednoduch√© ikony (modr√Ω ƒçtverec s p√≠smenem "B")
    sizes = {
        'windows': [16, 32, 48, 256],
        'macos': [16, 32, 128, 256, 512],
        'linux': [16, 32, 48, 64, 128, 256]
    }
    
    for platform, size_list in sizes.items():
        print(f"   üì± {platform.upper()}:")
        for size in size_list:
            # Vytvo≈ôen√≠ obr√°zku
            img = Image.new('RGBA', (size, size), (44, 62, 80, 255))  # Modr√° barva
            draw = ImageDraw.Draw(img)
            
            # P≈ôid√°n√≠ p√≠smene "B" (jednoduch√©)
            try:
                # Pokus o pou≈æit√≠ syst√©mov√©ho fontu
                from PIL import ImageFont
                font_size = size // 3
                font = ImageFont.truetype("arial.ttf", font_size)
            except:
                # Fallback na default font
                font = ImageFont.load_default()
            
            # V√Ωpoƒçet pozice textu
            bbox = draw.textbbox((0, 0), "B", font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            x = (size - text_width) // 2
            y = (size - text_height) // 2
            
            # Kreslen√≠ textu
            draw.text((x, y), "B", fill=(255, 255, 255, 255), font=font)
            
            # Ulo≈æen√≠
            if platform == 'windows':
                filename = f"assets/icons/windows/icon_{size}.png"
            elif platform == 'macos':
                filename = f"assets/icons/macos/icon_{size}.png"
            else:  # linux
                filename = f"assets/icons/linux/icon_{size}.png"
            
            img.save(filename, 'PNG')
            print(f"      ‚úÖ {size}x{size} ‚Üí {filename}")
    
    print("   ‚úÖ Testovac√≠ ikony vytvo≈ôeny")

def convert_to_ico():
    """Konvertuje PNG ikony do ICO form√°tu pro Windows"""
    print("\nü™ü Konverze do ICO form√°tu...")
    
    try:
        # Pou≈æit√≠ ImageMagick pokud je dostupn√©
        png_files = list(Path("assets/icons/windows").glob("icon_*.png"))
        png_files.sort(key=lambda x: int(x.stem.split('_')[1]))
        
        if png_files:
            # Vytvo≈ôen√≠ ICO souboru s v√≠ce velikostmi
            cmd = ['magick', 'convert']
            for png_file in png_files:
                cmd.append(str(png_file))
            cmd.extend(['icon.ico'])
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                print("   ‚úÖ icon.ico vytvo≈ôen pomoc√≠ ImageMagick")
            else:
                print("   ‚ùå Chyba p≈ôi vytv√°≈ôen√≠ ICO pomoc√≠ ImageMagick")
                # Fallback - kopie nejvƒõt≈°√≠ PNG
                largest_png = png_files[-1]
                shutil.copy2(largest_png, "icon.ico")
                print(f"   ‚ö†Ô∏è  Fallback: zkop√≠rov√°n {largest_png}")
        else:
            print("   ‚ùå Nenalezeny PNG soubory pro konverzi")
    
    except Exception as e:
        print(f"   ‚ùå Chyba p≈ôi konverzi do ICO: {e}")
        # Fallback - vytvo≈ôen√≠ jednoduch√©ho ICO
        try:
            largest_png = max(Path("assets/icons/windows").glob("icon_*.png"), 
                            key=lambda x: int(x.stem.split('_')[1]))
            shutil.copy2(largest_png, "icon.ico")
            print(f"   ‚ö†Ô∏è  Fallback: zkop√≠rov√°n {largest_png}")
        except Exception as fallback_error:
            print(f"   ‚ùå Fallback tak√© selhal: {fallback_error}")

def convert_to_icns():
    """Konvertuje PNG ikony do ICNS form√°tu pro macOS"""
    print("\nüçé Konverze do ICNS form√°tu...")
    
    try:
        # Pou≈æit√≠ ImageMagick pokud je dostupn√©
        png_files = list(Path("assets/icons/macos").glob("icon_*.png"))
        png_files.sort(key=lambda x: int(x.stem.split('_')[1]))
        
        if png_files:
            # Vytvo≈ôen√≠ ICNS souboru
            cmd = ['magick', 'convert']
            for png_file in png_files:
                cmd.append(str(png_file))
            cmd.extend(['icon.icns'])
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                print("   ‚úÖ icon.icns vytvo≈ôen pomoc√≠ ImageMagick")
            else:
                print("   ‚ùå Chyba p≈ôi vytv√°≈ôen√≠ ICNS pomoc√≠ ImageMagick")
                # Fallback - kopie nejvƒõt≈°√≠ PNG
                largest_png = png_files[-1]
                shutil.copy2(largest_png, "icon.icns")
                print(f"   ‚ö†Ô∏è  Fallback: zkop√≠rov√°n {largest_png}")
        else:
            print("   ‚ùå Nenalezeny PNG soubory pro konverzi")
    
    except Exception as e:
        print(f"   ‚ùå Chyba p≈ôi konverzi do ICNS: {e}")
        # Fallback - vytvo≈ôen√≠ jednoduch√©ho ICNS
        try:
            largest_png = max(Path("assets/icons/macos").glob("icon_*.png"), 
                            key=lambda x: int(x.stem.split('_')[1]))
            shutil.copy2(largest_png, "icon.icns")
            print(f"   ‚ö†Ô∏è  Fallback: zkop√≠rov√°n {largest_png}")
        except Exception as fallback_error:
            print(f"   ‚ùå Fallback tak√© selhal: {fallback_error}")

def copy_linux_icon():
    """Kop√≠ruje nejvƒõt≈°√≠ PNG ikonu pro Linux"""
    print("\nüêß Kop√≠rov√°n√≠ Linux ikony...")
    
    try:
        png_files = list(Path("assets/icons/linux").glob("icon_*.png"))
        if png_files:
            # Naj√≠t nejvƒõt≈°√≠ ikonu
            largest_png = max(png_files, key=lambda x: int(x.stem.split('_')[1]))
            shutil.copy2(largest_png, "icon.png")
            print(f"   ‚úÖ Zkop√≠rov√°no: {largest_png} ‚Üí icon.png")
        else:
            print("   ‚ùå Nenalezeny PNG soubory pro Linux")
    
    except Exception as e:
        print(f"   ‚ùå Chyba p≈ôi kop√≠rov√°n√≠ Linux ikony: {e}")

def generate_icons_from_svg(svg_file):
    """
    Generuje ikony z SVG souboru pro v≈°echny platformy
    
    Pou≈æit√≠:
    python scripts/generate_icons.py path/to/icon.svg
    """
    if not os.path.exists(svg_file):
        print(f"‚ùå SVG soubor neexistuje: {svg_file}")
        return False
    
    print(f"üé® Generov√°n√≠ ikon z: {svg_file}")
    
    # Kontrola n√°stroj≈Ø
    available_tools = check_dependencies()
    
    if 'Inkscape' in available_tools:
        print("\nüìê Pou≈æit√≠ Inkscape pro konverzi SVG...")
        # Zde by byla logika pro konverzi pomoc√≠ Inkscape
        # Inkscape --export-png=icon.png --export-width=256 --export-height=256 icon.svg
    elif 'ImageMagick' in available_tools:
        print("\nüñºÔ∏è  Pou≈æit√≠ ImageMagick pro konverzi SVG...")
        # Zde by byla logika pro konverzi pomoc√≠ ImageMagick
        # magick convert icon.svg -resize 256x256 icon.png
    else:
        print("\n‚ö†Ô∏è  ≈Ω√°dn√Ω n√°stroj pro konverzi SVG nen√≠ dostupn√Ω")
        print("   Vytv√°≈ô√≠m testovac√≠ ikony...")
        create_simple_icon()
    
    # Konverze do platformov√Ωch form√°t≈Ø
    convert_to_ico()
    convert_to_icns()
    copy_linux_icon()
    
    print("\n‚úÖ Ikony byly vygenerov√°ny")
    print("üìÅ Um√≠stƒõn√≠:")
    print("   - Windows: icon.ico")
    print("   - macOS: icon.icns")
    print("   - Linux: icon.png")
    print("   - Zdroje: assets/icons/")
    
    return True

def main():
    """Hlavn√≠ funkce"""
    if len(sys.argv) == 2:
        # Generov√°n√≠ z SVG
        svg_file = sys.argv[1]
        generate_icons_from_svg(svg_file)
    else:
        # Vytvo≈ôen√≠ testovac√≠ch ikon
        print("üé® BleedMakr - Generov√°n√≠ ikon")
        print("=" * 40)
        print("Pou≈æit√≠:")
        print("  python scripts/generate_icons.py [path/to/icon.svg]")
        print("")
        print("Pokud nen√≠ zad√°n SVG soubor, vytvo≈ô√≠ se testovac√≠ ikony.")
        print("")
        
        create_simple_icon()
        convert_to_ico()
        convert_to_icns()
        copy_linux_icon()
        
        print("\n‚úÖ Testovac√≠ ikony vytvo≈ôeny!")
        print("üí° Pro vlastn√≠ ikonu pou≈æijte:")
        print("   python scripts/generate_icons.py path/to/your/icon.svg")

if __name__ == "__main__":
    main() 