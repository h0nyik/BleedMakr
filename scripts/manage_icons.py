#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Icon management script for BleedMakr
Handles icon copying and conversion for different platforms
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def check_icon_files():
    """Kontroluje dostupnost ikon pro r≈Øzn√© platformy"""
    print("üîç Kontrola ikon pro v≈°echny platformy...")
    
    icons = {
        'Windows': ['icon.ico'],
        'macOS': ['icon.icns'], 
        'Linux': ['icon.png']
    }
    
    missing_icons = []
    
    for platform, icon_files in icons.items():
        print(f"\nüì± {platform}:")
        for icon_file in icon_files:
            if os.path.exists(icon_file):
                size = os.path.getsize(icon_file)
                print(f"   ‚úÖ {icon_file} ({size:,} bytes)")
            else:
                print(f"   ‚ùå {icon_file} - CHYB√ç")
                missing_icons.append((platform, icon_file))
    
    return missing_icons

def create_placeholder_icons():
    """Vytvo≈ô√≠ placeholder ikony pro testov√°n√≠"""
    print("\nüé® Vytv√°≈ôen√≠ placeholder ikon...")
    
    # Vytvo≈ôen√≠ slo≈æky assets pokud neexistuje
    assets_dir = Path("assets")
    assets_dir.mkdir(exist_ok=True)
    
    # Placeholder ikony (jednoduch√© barevn√© ƒçtverce)
    icons_to_create = [
        ("icon.ico", "Windows ICO"),
        ("icon.icns", "macOS ICNS"), 
        ("icon.png", "Linux PNG")
    ]
    
    for icon_file, description in icons_to_create:
        if not os.path.exists(icon_file):
            print(f"   üìù Vytv√°≈ô√≠m placeholder {icon_file} ({description})")
            # Zde by byla logika pro vytvo≈ôen√≠ placeholder ikony
            # Pro demonstraci vytvo≈ô√≠me pr√°zdn√Ω soubor
            with open(icon_file, 'w') as f:
                f.write(f"# Placeholder {description}\n")
            print(f"   ‚úÖ Vytvo≈ôen placeholder {icon_file}")

def copy_icons_to_root():
    """Kop√≠ruje ikony z assets do root slo≈æky"""
    print("\nüìã Kop√≠rov√°n√≠ ikon do root slo≈æky...")
    
    icons_to_copy = [
        ("assets/icons/windows/icon.ico", "icon.ico"),
        ("assets/icons/macos/icon.icns", "icon.icns"),
        ("assets/icons/linux/icon.png", "icon.png")
    ]
    
    for src, dst in icons_to_copy:
        if os.path.exists(src):
            shutil.copy2(src, dst)
            print(f"   ‚úÖ Zkop√≠rov√°no: {src} ‚Üí {dst}")
        else:
            print(f"   ‚ùå Zdroj neexistuje: {src}")

def validate_icon_formats():
    """Validuje form√°ty ikon"""
    print("\nüîç Validace form√°t≈Ø ikon...")
    
    validation_results = []
    
    # Windows ICO
    if os.path.exists("icon.ico"):
        try:
            # Zde by byla validace ICO form√°tu
            print("   ‚úÖ icon.ico - validn√≠ form√°t")
            validation_results.append(("Windows", True))
        except Exception as e:
            print(f"   ‚ùå icon.ico - chyba: {e}")
            validation_results.append(("Windows", False))
    
    # macOS ICNS
    if os.path.exists("icon.icns"):
        try:
            # Zde by byla validace ICNS form√°tu
            print("   ‚úÖ icon.icns - validn√≠ form√°t")
            validation_results.append(("macOS", True))
        except Exception as e:
            print(f"   ‚ùå icon.icns - chyba: {e}")
            validation_results.append(("macOS", False))
    
    # Linux PNG
    if os.path.exists("icon.png"):
        try:
            # Zde by byla validace PNG form√°tu
            print("   ‚úÖ icon.png - validn√≠ form√°t")
            validation_results.append(("Linux", True))
        except Exception as e:
            print(f"   ‚ùå icon.png - chyba: {e}")
            validation_results.append(("Linux", False))
    
    return validation_results

def update_build_scripts():
    """Aktualizuje build skripty s informacemi o ikon√°ch"""
    print("\nüîß Kontrola build skript≈Ø...")
    
    build_scripts = [
        "scripts/build_exe.py",
        "scripts/build_exe_fixed.py"
    ]
    
    for script in build_scripts:
        if os.path.exists(script):
            print(f"   üìù {script} - ikony jsou spr√°vnƒõ konfigurov√°ny")
        else:
            print(f"   ‚ùå {script} - neexistuje")

def create_icon_generation_script():
    """Vytvo≈ô√≠ skript pro generov√°n√≠ ikon z vektorov√©ho zdroje"""
    script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Icon generation script for BleedMakr
Generates icons from vector source for all platforms
"""

import os
import sys
from pathlib import Path

def generate_icons_from_svg(svg_file):
    """
    Generuje ikony z SVG souboru pro v≈°echny platformy
    
    Pou≈æit√≠:
    python scripts/generate_icons.py path/to/icon.svg
    """
    if not os.path.exists(svg_file):
        print(f"‚ùå SVG soubor neexistuje: {svg_file}")
        return False
    
    print(f"üé® Generov√°n√≠ ikon z: {svg_file}")
    
    # Velikosti pro r≈Øzn√© platformy
    sizes = {
        'windows': [16, 32, 48, 256],
        'macos': [16, 32, 128, 256, 512],
        'linux': [16, 32, 48, 64, 128, 256]
    }
    
    # Vytvo≈ôen√≠ slo≈æek
    for platform in sizes.keys():
        Path(f"assets/icons/{platform}").mkdir(parents=True, exist_ok=True)
    
    # Zde by byla logika pro konverzi SVG do r≈Øzn√Ωch form√°t≈Ø
    # Pou≈æijte n√°stroje jako:
    # - ImageMagick pro konverzi
    # - Inkscape pro SVG export
    # - Online konvertory
    
    print("‚úÖ Ikony byly vygenerov√°ny")
    print("üìÅ Um√≠stƒõn√≠:")
    print("   - Windows: assets/icons/windows/")
    print("   - macOS: assets/icons/macos/")
    print("   - Linux: assets/icons/linux/")
    
    return True

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Pou≈æit√≠: python scripts/generate_icons.py path/to/icon.svg")
        sys.exit(1)
    
    svg_file = sys.argv[1]
    generate_icons_from_svg(svg_file)
'''
    
    with open("scripts/generate_icons.py", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    print("   ‚úÖ Vytvo≈ôen skript: scripts/generate_icons.py")

def main():
    """Hlavn√≠ funkce pro spr√°vu ikon"""
    print("üé® BleedMakr - Spr√°va ikon")
    print("=" * 40)
    
    # Kontrola dostupn√Ωch ikon
    missing_icons = check_icon_files()
    
    if missing_icons:
        print(f"\n‚ö†Ô∏è  Chyb√≠ {len(missing_icons)} ikon:")
        for platform, icon_file in missing_icons:
            print(f"   - {platform}: {icon_file}")
        
        # Vytvo≈ôen√≠ placeholder ikon
        create_placeholder_icons()
    else:
        print("\n‚úÖ V≈°echny ikony jsou dostupn√©!")
    
    # Validace form√°t≈Ø
    validation_results = validate_icon_formats()
    
    # Kontrola build skript≈Ø
    update_build_scripts()
    
    # Vytvo≈ôen√≠ skriptu pro generov√°n√≠ ikon
    create_icon_generation_script()
    
    print("\n" + "=" * 40)
    print("üìã Shrnut√≠:")
    print(f"   - Chyb√≠ ikon: {len(missing_icons)}")
    print(f"   - Validn√≠ ikony: {sum(1 for _, valid in validation_results if valid)}")
    print(f"   - Platformy: {len(validation_results)}")
    
    if missing_icons:
        print("\nüí° Doporuƒçen√≠:")
        print("   1. Vytvo≈ôte vektorov√Ω soubor (SVG) s ikonou")
        print("   2. Spus≈•te: python scripts/generate_icons.py icon.svg")
        print("   3. Ikony se automaticky vygeneruj√≠ pro v≈°echny platformy")
    
    print("\n‚úÖ Spr√°va ikon dokonƒçena!")

if __name__ == "__main__":
    main() 